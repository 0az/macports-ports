# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0

name                    chicken
version                 4.11.0
categories              lang scheme
license                 BSD public-domain
maintainers             nomaintainer
description             Compiler for the Scheme programming language
long_description        Chicken produces portable, efficient C, supports \
                        almost all of the current Scheme language standard, \
                        the Revised5 Report on the Algorithmic Language \
                        Scheme (R5RS), and includes many enhancements and \
                        extensions.
homepage                http://www.call-with-current-continuation.org/
platforms               darwin

# Source contains some assembly files for PPC, i386, and x86_64. Not
# sure if the PPC one can be assembled with "-arch ppc64".
supported_archs         ppc i386 x86_64

set branch [join [lrange [split ${version} .] 0 2] .]
master_sites            http://code.call-cc.org/releases/${branch}

checksums               rmd160  3207bdd9e5b7d8f454d7612634c1da5bb3b820c7 \
                        sha256  e3dc2b8f95b6a3cd59c85b5bb6bdb2bd9cefc45b5d536a20cad74e3c63f4ad89

use_configure           no

# Upstream explicitly requires GNU make.
build.type              gnu
build.args              C_COMPILER=${configure.cc} \
                        CXX_COMPILER=${configure.cxx} \
                        PLATFORM=macosx \
                        PREFIX=${prefix}
# Upstream does not support parallel builds.
use_parallel_build      no

variant universal {}

# Correctly identify selected arch(s) to build system.
array set archs {ppc ppc.darwin i386 x86 x86_64 x86-64}
if {[variant_isset universal]} {
    build.args-append   ARCH=universal \
                        UNIVERSAL_ARCHS="[string map [array get archs] \
                                            ${configure.universal_archs}]"
} elseif {[info exists archs(${configure.build_arch})]} {
    build.args-append   ARCH=$archs(${configure.build_arch})
}

# Pass in correct arch and SDK flags.
set cflags "[get_canonical_archflags cc]"
set ldflags "[get_canonical_archflags ld]"
if {${configure.sdkroot} != ""} {
    set cflags "${cflags} -isysroot ${configure.sdkroot}"
    set ldflags "${ldflags} -Wl,-syslibroot,${configure.sdkroot}"
}
build.args-append       CFLAGS="${cflags}" \
                        LDFLAGS="${ldflags}"

destroot.args           ${build.args}

test.run                yes
test.target             PLATFORM=macosx check

livecheck.type          regex
livecheck.url           http://code.call-cc.org/releases/current/
livecheck.regex         {chicken-([0-9.]+)\.tar\.gz}
