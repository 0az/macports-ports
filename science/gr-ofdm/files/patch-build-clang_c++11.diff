diff --git a/CMakeLists.txt b/CMakeLists.txt
index a21dfde..48b8f3c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -57,7 +57,7 @@ set(Boost_ADDITIONAL_VERSIONS
     "1.60.0" "1.60" "1.61.0" "1.61" "1.62.0" "1.62" "1.63.0" "1.63" "1.64.0" "1.64"
     "1.65.0" "1.65" "1.66.0" "1.66" "1.67.0" "1.67" "1.68.0" "1.68" "1.69.0" "1.69"
 )
-find_package(Boost "1.35" COMPONENTS filesystem system)
+find_package(Boost "1.35" COMPONENTS filesystem system thread)
 
 if(NOT Boost_FOUND)
     message(FATAL_ERROR "Boost required to compile ofdm")
@@ -83,9 +83,8 @@ set(GRC_BLOCKS_DIR      ${GR_PKG_DATA_DIR}/grc/blocks)
 ########################################################################
 # Find gnuradio build dependencies
 ########################################################################
-#find_package(GnuradioRuntime)
 find_package(CppUnit)
-#find_package(GnuradioFFT)
+find_package(Volk)
 
 # To run a more advanced search for GNU Radio and it's components and
 # versions, use the following. Add any components required to the list
@@ -107,6 +106,9 @@ endif()
 if(NOT GNURADIO_BLOCKS_FOUND)
     message(FATAL_ERROR "GnuRadio Blocks required to compile ofdm")
 endif()
+if(NOT VOLK_FOUND)
+    message(FATAL_ERROR "Volk required to compile ofdm")
+endif()
 
 
 ########################################################################
diff --git a/apps/CMakeLists.txt b/apps/CMakeLists.txt
index a542d59..7af63a3 100644
--- a/apps/CMakeLists.txt
+++ b/apps/CMakeLists.txt
@@ -24,7 +24,8 @@ GR_PYTHON_INSTALL(
     gui/ofdm_rx_gui.py
     gui/ofdm_mrrc_rx_gui.py
     gui/ofdm_tx_gui.py
-    DESTINATION bin
+    DESTINATION
+    ${CMAKE_INSTALL_PREFIX}/share/gnuradio/examples/ofdm
 )
 
 install(
@@ -38,7 +39,8 @@ install(
     run_usrp_tx.sh
     run_test_demapper_fbmc.sh
     run_grc.sh
-    DESTINATION bin
+    DESTINATION
+    ${CMAKE_INSTALL_PREFIX}/share/gnuradio/examples/ofdm
 )
 
 install(
@@ -48,5 +50,6 @@ install(
     gui/ofdm_rx_gui_window.ui
     gui/ofdm_mrrc_rx_gui_window.ui
     gui/ofdm_tx_gui_window.ui
-    DESTINATION bin
+    DESTINATION
+    ${CMAKE_INSTALL_PREFIX}/share/gnuradio/examples/ofdm
 )
diff --git a/cmake/Modules/FindITPP.cmake b/cmake/Modules/FindITPP.cmake
index f4a0540..1f09141 100644
--- a/cmake/Modules/FindITPP.cmake
+++ b/cmake/Modules/FindITPP.cmake
@@ -7,25 +7,13 @@
 # also defined, but not for general use are
 #  ITPP_LIBRARY, where to find the ITPP library.
 
-#MESSAGE("ITPP_DIR set to ${ITPP_DIR}" )
-
 FIND_PATH(ITPP_INCLUDE_DIR itpp/itbase.h
-    ${ITPP_DIR}
-    /usr/pkgs64/include
-    /usr/include
-    NO_DEFAULT_PATH
+    ${ITPP_DIR}/include
     )
 
 FIND_LIBRARY(ITPP_LIBRARY
-    NAMES itpp #itpp_debug
+    NAMES itpp
     PATHS ${ITPP_DIR}/libs
-    ${ITPP_DIR}/itpp/.libs/
-    "${ITPP_DIR}\\win32\\lib"
-    /usr/lib/x86_64-linux-gnu
-    /usr/pkgs64/lib
-    /usr/lib64
-    /usr/lib
-    NO_DEFAULT_PATH
     )
 
 IF (ITPP_LIBRARY AND ITPP_INCLUDE_DIR)
@@ -35,7 +23,6 @@ ELSE (ITPP_LIBRARY AND ITPP_INCLUDE_DIR)
     SET(ITPP_FOUND "NO")
 ENDIF (ITPP_LIBRARY AND ITPP_INCLUDE_DIR)
 
-
 IF (ITPP_FOUND)
     IF (NOT ITPP_FIND_QUIETLY)
         MESSAGE(STATUS "Found ITPP: ${ITPP_LIBRARIES}")
diff --git a/include/ofdm/ofdmi_fast_math.h b/include/ofdm/ofdmi_fast_math.h
index 0488d73..085eae7 100644
--- a/include/ofdm/ofdmi_fast_math.h
+++ b/include/ofdm/ofdmi_fast_math.h
@@ -23,6 +23,7 @@
 #ifndef INCLUDED_OFDMI_FAST_MATH_H_
 #define INCLUDED_OFDMI_FAST_MATH_H_
 
+#include <pmmintrin.h>
 
 typedef float v4sf __attribute__ ((vector_size (16)));
 typedef float const v4sfc __attribute__ ((vector_size (16)));
@@ -52,31 +53,31 @@ perform_frequency_shift( gr_complex const * const in, gr_complex * const out,
   step_phasor.v[2] = std::cos( 2 * phase_step );
   step_phasor.v[3] = std::sin( 2 * phase_step );
 
-  v4sfc * vin = reinterpret_cast< v4sfc * >( in );
+  const v4sfc * vin = reinterpret_cast< const v4sfc * >( in );
   v4sf * vout = reinterpret_cast< v4sf * >( out );
 
   // complex multiplication, with gr_expj( phase )
   // phase increased for every complex sample
   for( int j = 0; j < vlen/2; ++j )
   {
-    v4sf x0 = __builtin_ia32_movsldup( phasor.vec );
+    v4sf x0 = _mm_moveldup_ps( phasor.vec );
     v4sf x1 = vin[ j ];
     x0 *= x1;
 
-    x1 = __builtin_ia32_shufps( x1, x1, 0xB1 );
-    v4sf x2 = __builtin_ia32_movshdup( phasor.vec );
+    x1 = _mm_shuffle_ps( x1, x1, 0xB1 );
+    v4sf x2 = _mm_movehdup_ps( phasor.vec );
     x2 *= x1;
 
     x0 = __builtin_ia32_addsubps( x0, x2 );
     vout[ j ] = x0;
 
 
-    x0 = __builtin_ia32_movsldup( phasor.vec );
+    x0 = _mm_moveldup_ps( phasor.vec );
     x1 = step_phasor.vec;
     x0 *= x1;
 
-    x1 = __builtin_ia32_shufps( x1, x1, 0xB1 );
-    x2 = __builtin_ia32_movshdup( phasor.vec );
+    x1 = _mm_shuffle_ps( x1, x1, 0xB1 );
+    x2 = _mm_movehdup_ps( phasor.vec );
     x2 *= x1;
 
     x0 = __builtin_ia32_addsubps( x0, x2 );
@@ -101,18 +102,18 @@ void
 multiply_complex_vector( gr_complex const * const x,
   gr_complex const * const y, gr_complex * const out, int vlen )
 {
-  v4sfc * vx = reinterpret_cast< v4sfc * >( x );
-  v4sfc * vy = reinterpret_cast< v4sfc * >( y );
+  const v4sfc * vx = reinterpret_cast< const v4sfc * >( x );
+  const v4sfc * vy = reinterpret_cast< const v4sfc * >( y );
   v4sf * vout = reinterpret_cast< v4sf * >( out );
 
   for( int j = 0; j < vlen/2; ++j )
   {
-    v4sf x0 = __builtin_ia32_movsldup( vx[ j ] );
+    v4sf x0 = _mm_moveldup_ps( vx[ j ] );
     v4sf x1 = vy[ j ];
     x0 *= x1;
 
-    x1 = __builtin_ia32_shufps( x1, x1, 0xB1 );
-    v4sf x2 = __builtin_ia32_movshdup( vx[ j ] );
+    x1 = _mm_shuffle_ps( x1, x1, 0xB1 );
+    v4sf x2 = _mm_movehdup_ps( vx[ j ] );
     x2 *= x1;
 
     x0 = __builtin_ia32_addsubps( x0, x2 );
diff --git a/include/ofdm/ofdmi_mod.h b/include/ofdm/ofdmi_mod.h
index ce828a4..896f86b 100644
--- a/include/ofdm/ofdmi_mod.h
+++ b/include/ofdm/ofdmi_mod.h
@@ -207,10 +207,10 @@ private:
   const generic_modulation_scheme<3> mod;
 
 
-  static const float d_pi_8 = M_PI / 8.0;
-  static const float d_7pi_8 = 7.0 * M_PI / 8.0;
-  static const float d_3pi_8 = 3.0 * M_PI / 8.0;
-  static const float d_5pi_8 = 5.0 * M_PI / 8.0;
+  const float d_pi_8 = M_PI / 8.0;
+  const float d_7pi_8 = 7.0 * M_PI / 8.0;
+  const float d_3pi_8 = 3.0 * M_PI / 8.0;
+  const float d_5pi_8 = 5.0 * M_PI / 8.0;
 
 public:
   inline m8psk_scheme() : modulation_scheme(3) {};
@@ -250,7 +250,7 @@ class m16qam_scheme : public modulation_scheme
 private:
   const generic_modulation_scheme<4> mod;
 
-  static const float level_0 = 0.6325;
+  const float level_0 = 0.6325;
 
 public:
   inline m16qam_scheme() : modulation_scheme(4) {};
@@ -350,9 +350,9 @@ class m64qam_scheme : public modulation_scheme
 private:
   const generic_modulation_scheme<6> mod;
 
-  static const float level = 0.3086;
-  static const float level2 = 0.3086*2.0;
-  static const float level3 = 0.3086*3.0;
+  const float level = 0.3086;
+  const float level2 = 0.3086*2.0;
+  const float level3 = 0.3086*3.0;
 
 public:
   inline m64qam_scheme() : modulation_scheme(6) {};
diff --git a/lib/CMakeLists.txt b/lib/CMakeLists.txt
index 959c59c..f3a83b9 100644
--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -167,7 +167,7 @@ list(APPEND ofdm_sources
     fbmc_subchannel_processing_mu_vcvc_impl.cc 
     feedback_sink_vf_impl.cc
     vector_element_vff_impl.cc)
-SET ( CMAKE_CXX_FLAGS "-O3 -march=core2 -mfpmath=sse" )
+SET ( CMAKE_CXX_FLAGS "-O3 -msse3 -march=core2 -mfpmath=sse" )
 add_library(gnuradio-ofdm SHARED ${ofdm_sources})
 target_link_libraries(gnuradio-ofdm
     ${Boost_LIBRARIES}
diff --git a/lib/CTF_MSE_enhancer_impl.cc b/lib/CTF_MSE_enhancer_impl.cc
index b681480..ddc1458 100644
--- a/lib/CTF_MSE_enhancer_impl.cc
+++ b/lib/CTF_MSE_enhancer_impl.cc
@@ -27,7 +27,7 @@
 #include <gnuradio/io_signature.h>
 #include "CTF_MSE_enhancer_impl.h"
 
-
+#include <pmmintrin.h>
 #include "malloc16.h"
 
 #include <iostream>
@@ -168,12 +168,12 @@ namespace gr {
 
     	    for( int j = 0; j < d_vlen/4; ++j )
     	    {
-    	      v4sf x0 = __builtin_ia32_movsldup( vfbuf4[ j ] );
+    	      v4sf x0 = _mm_moveldup_ps( vfbuf4[ j ] );
     	      v4sf x1 = vffilt[ j ];
     	      x0 *= x1;
 
-    	      x1 = __builtin_ia32_shufps( x1, x1, 0xB1 );
-    	      v4sf x2 = __builtin_ia32_movshdup( vfbuf4[ j ] );
+    	      x1 = _mm_shuffle_ps( x1, x1, 0xB1 );
+    	      v4sf x2 = _mm_movehdup_ps( vfbuf4[ j ] );
     	      x2 *= x1;
 
     	      x0 = __builtin_ia32_addsubps( x0, x2 );
diff --git a/lib/accumulator_cc_impl.cc b/lib/accumulator_cc_impl.cc
index 5c820ae..4fa6e3a 100644
--- a/lib/accumulator_cc_impl.cc
+++ b/lib/accumulator_cc_impl.cc
@@ -70,6 +70,7 @@ namespace gr {
     	  }
 
     	  d_accum = acc;
+          return(noutput_items);
     }
 
   } /* namespace ofdm */
diff --git a/lib/allocation_buffer_impl.cc b/lib/allocation_buffer_impl.cc
index a8368e6..5b7bc1c 100644
--- a/lib/allocation_buffer_impl.cc
+++ b/lib/allocation_buffer_impl.cc
@@ -51,7 +51,7 @@ namespace gr {
     	, d_data_symbols(data_symbols)
     	, d_allocation_buffer(256) //TODO: id size hardcoded
 		,d_coding( coding )
-		,d_bitspermode( {1,2,3,4,6,8,9,10,12})
+		,d_bitspermode{1,2,3,4,6,8,9,10,12}
     {
         std::vector<int> out_sig(3);
         out_sig[0] = sizeof(int);                               // bitcount
diff --git a/lib/allocation_src_impl.cc b/lib/allocation_src_impl.cc
index 17dc029..84c8c9b 100644
--- a/lib/allocation_src_impl.cc
+++ b/lib/allocation_src_impl.cc
@@ -62,8 +62,8 @@ namespace gr {
         ,d_subcarriers(subcarriers)
         ,d_data_symbols(data_symbols)
         ,d_coding( coding )
-        ,d_bitspermode( {1,2,3,4,6,8,9,10,12})
-        ,d_modulbitspermode( {1,2,2,4,4,6,6,6,8} )
+        ,d_bitspermode{1,2,3,4,6,8,9,10,12}
+        ,d_modulbitspermode{1,2,2,4,4,6,6,6,8}
         ,d_modulbitcount_out(2000)
         ,d_allocation_scheme(CM)
         ,d_power_limit(subcarriers)
diff --git a/lib/autocorrelator_stage1_impl.cc b/lib/autocorrelator_stage1_impl.cc
index 61d6609..fd95a8e 100644
--- a/lib/autocorrelator_stage1_impl.cc
+++ b/lib/autocorrelator_stage1_impl.cc
@@ -27,6 +27,7 @@
 #include <gnuradio/io_signature.h>
 #include "autocorrelator_stage1_impl.h"
 #include <iostream>
+#include <pmmintrin.h>
 
 namespace gr {
   namespace ofdm {
@@ -105,24 +106,24 @@ namespace gr {
     	    v4sf const in_del0 = *in_del;
     	    v4sf const in_del1 = *(in_del+1);
 
-    	    v4sf x0 = __builtin_ia32_movsldup( in0 );
-    	    v4sf x1 = __builtin_ia32_xorps( in_del0, xsign ); // conjugate
+    	    v4sf x0 = _mm_moveldup_ps( in0 );
+    	    v4sf x1 = _mm_xor_ps( in_del0, xsign ); // conjugate
     	    x0 *=  x1;
 
-    	    x1 = __builtin_ia32_shufps( x1, x1, 0xB1 );
-    	    v4sf x2 = __builtin_ia32_movshdup( in0 );
+    	    x1 = _mm_shuffle_ps( x1, x1, 0xB1 );
+    	    v4sf x2 = _mm_movehdup_ps( in0 );
     	    x2 *= x1;
 
     	    x0 = __builtin_ia32_addsubps( x0, x2 );
     	    p[0] = x0;
 
 
-    	    x0 = __builtin_ia32_movsldup( in1 );
-    	    x1 = __builtin_ia32_xorps( in_del1, xsign ); // conjugate
+    	    x0 = _mm_moveldup_ps( in1 );
+    	    x1 = _mm_xor_ps( in_del1, xsign ); // conjugate
     	    x0 *= x1;
 
-    	    x1 = __builtin_ia32_shufps( x1, x1, 0xB1 );
-    	    x2 = __builtin_ia32_movshdup( in1 );
+    	    x1 = _mm_shuffle_ps( x1, x1, 0xB1 );
+    	    x2 = _mm_movehdup_ps( in1 );
     	    x2 *= x1;
 
     	    x0 = __builtin_ia32_addsubps( x0, x2 );
diff --git a/lib/autocorrelator_stage2_impl.cc b/lib/autocorrelator_stage2_impl.cc
index 93b5240..d897b4c 100644
--- a/lib/autocorrelator_stage2_impl.cc
+++ b/lib/autocorrelator_stage2_impl.cc
@@ -26,6 +26,7 @@
 
 #include <gnuradio/io_signature.h>
 #include "autocorrelator_stage2_impl.h"
+#include <xmmintrin.h>
 
 namespace gr {
   namespace ofdm {
@@ -78,8 +79,8 @@ namespace gr {
     	  float      acc2 = d_acc2;
 
     	  // use references for simpler access
-    	  float & x = acc1.real();
-    	  float & y = acc1.imag();
+    	  const float & x = acc1.real();
+    	  const float & y = acc1.imag();
 
     	  // NOTE: GCC performs better if we use temporary constants for
     	  // every expression
diff --git a/lib/channel_equalizer_impl.cc b/lib/channel_equalizer_impl.cc
index f77323c..031a077 100644
--- a/lib/channel_equalizer_impl.cc
+++ b/lib/channel_equalizer_impl.cc
@@ -31,6 +31,7 @@
 #include <algorithm>
 
 #include "malloc16.h"
+#include <pmmintrin.h>
 
 #define DEBUG 0
 
@@ -158,12 +159,12 @@ namespace gr {
     	    {
     	      for( int j = 0; j < d_vlen/2; ++j )
     	      {
-    	        v4sf x0 = __builtin_ia32_movsldup( vin[ j ] );
+    	        v4sf x0 = _mm_moveldup_ps( vin[ j ] );
     	        v4sf x1 = vbuf[ j ];
     	        x0 *= x1;
 
-    	        x1 = __builtin_ia32_shufps( x1, x1, 0xB1 );
-    	        v4sf x2 = __builtin_ia32_movshdup( vin[ j ] );
+    	        x1 = _mm_shuffle_ps( x1, x1, 0xB1 );
+    	        v4sf x2 = _mm_movehdup_ps( vin[ j ] );
     	        x2 *= x1;
 
     	        x0 = __builtin_ia32_addsubps( x0, x2 );
diff --git a/lib/depuncture_bb_impl.cc b/lib/depuncture_bb_impl.cc
index efb199c..833703a 100644
--- a/lib/depuncture_bb_impl.cc
+++ b/lib/depuncture_bb_impl.cc
@@ -59,7 +59,7 @@ namespace gr {
     	, d_need_modemap( 1 )
     	, d_modemap(new char[vlen])
     		//d_rep_per_mode( {1,1,1,1,1,1,1,1,1} ) // test case
-    	, d_rep_per_mode( {2,4,1,8,2,4,3,2,4} )
+        , d_rep_per_mode{2,4,1,8,2,4,3,2,4} // C++11 only: consider std::array
     {}
 
     void depuncture_bb_impl::set_punctpat(char c_mode)
diff --git a/lib/depuncture_ff_impl.cc b/lib/depuncture_ff_impl.cc
index be50800..0c6f2d5 100644
--- a/lib/depuncture_ff_impl.cc
+++ b/lib/depuncture_ff_impl.cc
@@ -59,7 +59,7 @@ namespace gr {
     	, d_need_modemap( 1 )
     	, d_modemap(new char[vlen])
     		//d_rep_per_mode( {1,1,1,1,1,1,1,1,1} ) // test case
-    	, d_rep_per_mode( {2,4,1,8,2,4,3,2,4} )
+        , d_rep_per_mode{2,4,1,8,2,4,3,2,4} // C++11 only: consider std::array
     {}
 
     void depuncture_ff_impl::set_punctpat(char c_mode)
diff --git a/lib/extract_block_from_frame_impl.cc b/lib/extract_block_from_frame_impl.cc
index 42e60c6..4e99573 100644
--- a/lib/extract_block_from_frame_impl.cc
+++ b/lib/extract_block_from_frame_impl.cc
@@ -91,7 +91,7 @@ namespace gr {
     	  {
     	    if( frame_start[i] != 0 )
     	    {
-    	      d_ctr == 0;
+    	      d_ctr = 0;
     	    }
 
     	    if( d_ctr < d_block_no )
diff --git a/lib/fbmc_polyphase_network_vcvc_impl.cc b/lib/fbmc_polyphase_network_vcvc_impl.cc
index 98368f0..dfc4eb3 100644
--- a/lib/fbmc_polyphase_network_vcvc_impl.cc
+++ b/lib/fbmc_polyphase_network_vcvc_impl.cc
@@ -91,9 +91,9 @@ namespace gr {
 	{
 	  // coefficients
 	  float **P = new float*[3];
-	  float P0[]={1, sqrt(2)/2}; //K=2
+	  float P0[]={1, sqrtf(2)/2}; //K=2
 	  float P1[]={1,0.911438,0.411438}; //K=3
-	  float P2[]={1,0.97195983,sqrt(2)/2,0.23514695}; //K=4
+	  float P2[]={1,0.97195983,sqrtf(2)/2,0.23514695}; //K=4
 	  P[0] = P0;
 	  P[1] = P1;
 	  P[2] = P2;
diff --git a/lib/fbmc_subchannel_processing_mu_vcvc_impl.cc b/lib/fbmc_subchannel_processing_mu_vcvc_impl.cc
index bb96f3d..c364de4 100644
--- a/lib/fbmc_subchannel_processing_mu_vcvc_impl.cc
+++ b/lib/fbmc_subchannel_processing_mu_vcvc_impl.cc
@@ -241,17 +241,18 @@ namespace gr {
 
 						gr_complex EQ1, EQ2;
 						if(d_sel_eq==1){ // linear interpolation
-							EQ1 = (EQmin+EQi)/gr_complex(2,0);
-							EQ2 = (EQplus+EQi)/gr_complex(2,0);
+                                                  const float ro = 0.5;
+                                                  EQ1 = (EQmin+EQi)*ro;
+                                                  EQ2 = (EQplus+EQi)*ro;
 						}else if(d_sel_eq==2){
-							float ro = 0.5;
-							EQ1 = (gr_complex)EQmin*pow((EQi/EQmin),ro);
-			                EQ2 = (gr_complex)EQi*pow((EQplus/EQi),ro);
+                                                  const float ro = 0.5;
+                                                  EQ1 = EQmin*pow((EQi/EQmin),ro);
+                                                  EQ2 = EQi*pow((EQplus/EQi),ro);
 						}
 
-						d_eq_coef[i]= pow(gr_complex(-1,0),i)*((EQ1-gr_complex(2,0)*EQi+EQ2)+gr_complex(0,1)*(EQ2-EQ1))/gr_complex(4,0);
-						d_eq_coef[i+d_M]= (gr_complex)(EQ1+EQ2)/gr_complex(2,0);
-						d_eq_coef[i+2*d_M]= pow(gr_complex(-1,0),i)*((EQ1-gr_complex(2,0)*EQi+EQ2)-gr_complex(0,1)*(EQ2-EQ1))/gr_complex(4,0);
+						d_eq_coef[i]= powf(-1.0,i)*((EQ1-(float(2.0)*EQi)+EQ2)+(gr_complex(0.0,1.0)*(EQ2-EQ1)))/float(4.0);
+						d_eq_coef[i+d_M]= (EQ1+EQ2)/float(2.0);
+						d_eq_coef[i+2*d_M]= powf(-1.0,i)*((EQ1-(float(2.0)*EQi)+EQ2)-(gr_complex(0.0,1.0)*(EQ2-EQ1)))/float(4.0);
 
 						// //logging
 						// equalizer_data<<(fr-1)<<"\t"<<i<<"\t"<<real(d_estimation[i])<<"\t"<<imag(d_estimation[i])<<"j\t";//((imag(d_estimation[i])>0)?"+":"-")
diff --git a/lib/fbmc_subchannel_processing_vcvc_impl.cc b/lib/fbmc_subchannel_processing_vcvc_impl.cc
index df46abd..3625d24 100644
--- a/lib/fbmc_subchannel_processing_vcvc_impl.cc
+++ b/lib/fbmc_subchannel_processing_vcvc_impl.cc
@@ -457,6 +457,7 @@ namespace gr {
 		fbmc_subchannel_processing_vcvc_impl::get_estimation(const gr_complex * start)
 		{
 			// int offset = estimation_point - d_M+1;
+#if 0                  
 /*			for(int i=0;i<d_M;i++){
 				d_estimation[i] = *(start-d_M+i+1)/(d_preamble[i]*normalization_factor);//*gr_complex(0.6863,0));
 				// // *(start-d_M+i+1) = d_estimation[i];
@@ -480,10 +481,10 @@ namespace gr {
 				volk_32f_x2_divide_32f(&d_divide[0],&d_norm_vect[0],&d_squared[0],d_M);
 				volk_32fc_32f_multiply_32fc(&d_estimation[0],&d_conj[0],&d_divide[0],d_M);
 				*/
-
+#endif
 				volk_32fc_32f_multiply_32fc(&d_conj[0],start,&d_preamble_1[0],d_M);
 				volk_32fc_32f_multiply_32fc(&d_estimation[0],&d_conj[0],&d_norm_vect[0],d_M);
-
+#if 0
 /*
 				std::cout<<"FRAME: "<<std::endl;
 				for(int i=0;i<d_M/2;i++){
@@ -518,6 +519,7 @@ namespace gr {
 				volk_32f_x2_add_32f(&d_estimation_q[0],&d_estimation_1_q[0],&d_estimation_2_q[0],d_M);
 				volk_32f_x2_interleave_32fc(&d_estimation[0],&d_estimation_i[0],&d_estimation_q[0],d_M);
 */
+#endif
 				//std::cout<<"FRAME: "<<std::endl;
 				for(int i=0;i<d_M/2;i++){
 				//	std::cout<<d_estimation[i]<<std::endl;
@@ -549,25 +551,26 @@ namespace gr {
 
 				gr_complex EQ1, EQ2;
 				if(d_sel_eq==1){ // linear interpolation
-					EQ1 = (EQmin+EQi)/gr_complex(2,0);
-					EQ2 = (EQplus+EQi)/gr_complex(2,0);
+					float ro = 0.5;
+                                        EQ1 = (EQmin+EQi)*ro;
+                                  EQ2 = (EQplus+EQi)*ro;
 				}else if(d_sel_eq==2){
 					float ro = 0.5;
-					EQ1 = (gr_complex)EQmin*pow((EQi/EQmin),ro);
-	                EQ2 = (gr_complex)EQi*pow((EQplus/EQi),ro);
+					EQ1 = EQmin*pow((EQi/EQmin),ro);
+	                EQ2 = EQi*pow((EQplus/EQi),ro);
 				}
 
 				// 0:2-> new implementation, 3< -> old implementation
 				if(order == 0){
-					d_eq_coef[i+2*d_M]= pow(gr_complex(-1,0),i)*((EQ1-gr_complex(2,0)*EQi+EQ2)-gr_complex(0,1)*(EQ2-EQ1))/gr_complex(4,0); // change this first
+                                  d_eq_coef[i+2*d_M]= powf(-1.0,i)*((EQ1-(float(2.0)*EQi)+EQ2)-(gr_complex(0,1)*(EQ2-EQ1)))/float(4.0); // change this first
 				}else if (order == 1){
-					d_eq_coef[i+d_M]= (gr_complex)(EQ1+EQ2)/gr_complex(2,0); // then this
+					d_eq_coef[i+d_M]= (EQ1+EQ2)/float(2.0); // then this
 				}else if(order == 2){
-					d_eq_coef[i]= pow(gr_complex(-1,0),i)*((EQ1-gr_complex(2,0)*EQi+EQ2)+gr_complex(0,1)*(EQ2-EQ1))/gr_complex(4,0); // lastly this
+                                  d_eq_coef[i]= powf(-1.0,i)*((EQ1-(float(2.0)*EQi)+EQ2)+(gr_complex(0,1)*(EQ2-EQ1)))/float(4.0); // lastly this
 				}else{
-					d_eq_coef[i]= pow(gr_complex(-1,0),i)*((EQ1-gr_complex(2,0)*EQi+EQ2)+gr_complex(0,1)*(EQ2-EQ1))/gr_complex(4,0);
-					d_eq_coef[i+d_M]= (gr_complex)(EQ1+EQ2)/gr_complex(2,0);
-					d_eq_coef[i+2*d_M]= pow(gr_complex(-1,0),i)*((EQ1-gr_complex(2,0)*EQi+EQ2)-gr_complex(0,1)*(EQ2-EQ1))/gr_complex(4,0);
+                                  d_eq_coef[i]= powf(-1.0,i)*((EQ1-(float(2.0)*EQi)+EQ2)+(gr_complex(0,1)*(EQ2-EQ1)))/float(4.0);
+					d_eq_coef[i+d_M]= (EQ1+EQ2)/float(2.0);
+					d_eq_coef[i+2*d_M]= powf(-1.0,i)*((EQ1-(float(2.0)*EQi)+EQ2)-(gr_complex(0,1)*(EQ2-EQ1)))/float(4.0);
 				}
 
 				// //logging
diff --git a/lib/find_cir_shift_impl.cc b/lib/find_cir_shift_impl.cc
index f3a2500..96f6635 100644
--- a/lib/find_cir_shift_impl.cc
+++ b/lib/find_cir_shift_impl.cc
@@ -27,6 +27,7 @@
 #include <gnuradio/io_signature.h>
 #include "find_cir_shift_impl.h"
 
+#include <pmmintrin.h>
 #include "malloc16.h"
 
 #include <iostream>
@@ -160,12 +161,12 @@ namespace gr {
 
     	    for( int j = 0; j < d_vlen/4; ++j )
     	    {
-    	      v4sf x0 = __builtin_ia32_movsldup( vfbuf4[ j ] );
+    	      v4sf x0 = _mm_moveldup_ps( vfbuf4[ j ] );
     	      v4sf x1 = vffilt[ j ];
     	      x0 *= x1;
 
-    	      x1 = __builtin_ia32_shufps( x1, x1, 0xB1 );
-    	      v4sf x2 = __builtin_ia32_movshdup( vfbuf4[ j ] );
+    	      x1 = _mm_shuffle_ps( x1, x1, 0xB1 );
+    	      v4sf x2 = _mm_movehdup_ps( vfbuf4[ j ] );
     	      x2 *= x1;
 
     	      x0 = __builtin_ia32_addsubps( x0, x2 );
diff --git a/lib/itpp_tdl_channel_impl.cc b/lib/itpp_tdl_channel_impl.cc
index ee0938f..cb2050f 100644
--- a/lib/itpp_tdl_channel_impl.cc
+++ b/lib/itpp_tdl_channel_impl.cc
@@ -359,6 +359,7 @@ namespace gr {
         }
       }
       assert(0 && "failed to translate");
+      return((T2)(-1));
     }
 
     template < typename T1, typename T2 >
@@ -373,6 +374,7 @@ namespace gr {
         }
       }
       assert(0 && "failed to translate");
+      return((T1)(-1));
     }
 
     #define ENUM_FIRST_TO_SECOND( x )     \
diff --git a/lib/multiply_const_vcc_impl.cc b/lib/multiply_const_vcc_impl.cc
index 94bbfff..e8678c9 100644
--- a/lib/multiply_const_vcc_impl.cc
+++ b/lib/multiply_const_vcc_impl.cc
@@ -27,6 +27,7 @@
 #include <gnuradio/io_signature.h>
 #include "multiply_const_vcc_impl.h"
 
+#include <pmmintrin.h>
 #include "malloc16.h"
 
 #include <iostream>
@@ -85,12 +86,12 @@ namespace gr {
     	  {
     	    for( int j = 0; j < d_vlen/2; ++j )
     	    {
-    	      v4sf x0 = __builtin_ia32_movsldup( buf[ j ] );
+    	      v4sf x0 = _mm_moveldup_ps( buf[ j ] );
     	      v4sf x1 = in[ j ];
     	      x0 *= x1;
 
-    	      x1 = __builtin_ia32_shufps( x1, x1, 0xB1 );
-    	      v4sf x2 = __builtin_ia32_movshdup( buf[ j ] );
+    	      x1 = _mm_shuffle_ps( x1, x1, 0xB1 );
+    	      v4sf x2 = _mm_movehdup_ps( buf[ j ] );
     	      x2 *= x1;
 
     	      x0 = __builtin_ia32_addsubps( x0, x2 );
diff --git a/lib/puncture_bb_impl.cc b/lib/puncture_bb_impl.cc
index eac25ca..13cc801 100644
--- a/lib/puncture_bb_impl.cc
+++ b/lib/puncture_bb_impl.cc
@@ -58,7 +58,7 @@ namespace gr {
     	, d_need_modemap( 1 )
     	, d_modemap(new char[vlen])
     	//d_rep_per_mode( {1,1,1,1,1,1,1,1,1} ) // test case
-    	, d_rep_per_mode( {2,4,1,8,2,4,3,2,4} )
+        , d_rep_per_mode{2,4,1,8,2,4,3,2,4} // C++11 only: consider std::array
     {
     	set_relative_rate(1.0/6.0);
     }
diff --git a/lib/schmidl_tm_rec_stage2_impl.cc b/lib/schmidl_tm_rec_stage2_impl.cc
index 60835db..ce128af 100644
--- a/lib/schmidl_tm_rec_stage2_impl.cc
+++ b/lib/schmidl_tm_rec_stage2_impl.cc
@@ -81,8 +81,8 @@ namespace gr {
     	  float      acc3 = d_acc3;
 
     	  // use references for simpler access
-    	  float & x = acc1.real();
-    	  float & y = acc1.imag();
+    	  const float & x = acc1.real();
+    	  const float & y = acc1.imag();
 
     	  // NOTE: GCC performs better if we use temporary constants for
     	  // every expression
diff --git a/lib/util_bmp.cc b/lib/util_bmp.cc
index e151a10..e29b4ed 100644
--- a/lib/util_bmp.cc
+++ b/lib/util_bmp.cc
@@ -1,6 +1,5 @@
 #include <stdio.h>
 #include <cstdlib>
-#include <malloc.h>
 #include <ofdm/util_endian.h>
 #include <ofdm/util_bmp.h>
 
diff --git a/python/ofdm/CMakeLists.txt b/python/ofdm/CMakeLists.txt
index d30b694..81de326 100644
--- a/python/ofdm/CMakeLists.txt
+++ b/python/ofdm/CMakeLists.txt
@@ -63,13 +63,8 @@ GR_PYTHON_INSTALL(
     transmit_path.py
     fbmc_transmit_path.py
     scfdma_receiver_cb.py
-    fbmc_insert_preamble_mu_vcvc.py DESTINATION bin
-)
-
-GR_PYTHON_INSTALL(
-    FILES
-    configparse.py
-    DESTINATION ${GR_PYTHON_DIR}
+    fbmc_insert_preamble_mu_vcvc.py DESTINATION
+    ${CMAKE_INSTALL_PREFIX}/share/gnuradio/examples/ofdm
 )
 
 GR_PYTHON_INSTALL(
@@ -78,6 +73,7 @@ GR_PYTHON_INSTALL(
     autocorrelator.py
     channel.py
     common_options.py
+    configparse.py
     delaylines.py
     file_psd.py
     fusb_options.py
